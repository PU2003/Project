{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  loading: false,\n  error: false,\n  firstName: '',\n  firstNameValid: false,\n  lastName: '',\n  lastNameValid: false,\n  email: '',\n  emailValid: false,\n  dob: {\n    month: 0,\n    day: 0,\n    year: 0\n  },\n  dobValid: false,\n  step: 1\n};\nexport const RegisterSlice = createSlice({\n  name: \"register\",\n  initialState,\n  reducers: {\n    updateRegister(state, action) {\n      let {\n        name,\n        value\n      } = action.payload;\n      if (name === 'month' || name === 'day' || name === 'year') {\n        let dob = state.dob;\n        dob = {\n          ...dob,\n          [name]: value\n        };\n        state = {\n          ...state,\n          dob\n        };\n      } else {\n        state = {\n          ...state,\n          [name]: value\n        };\n      }\n      console.log('Updating the global register state: ', state);\n      return state;\n    },\n    incrementStep(state) {\n      state.step++;\n      return state;\n    },\n    decrementStep(state) {\n      if (state.step === 1 || state.step === 4 || state.step >= 6) {\n        return state;\n      } else {\n        state.step--;\n        return state;\n      }\n    }\n  }\n});\nexport const {\n  updateRegister,\n  incrementStep,\n  decrementStep\n} = RegisterSlice.actions;\nexport default RegisterSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","loading","error","firstName","firstNameValid","lastName","lastNameValid","email","emailValid","dob","month","day","year","dobValid","step","RegisterSlice","name","reducers","updateRegister","state","action","value","payload","console","log","incrementStep","decrementStep","actions","reducer"],"sources":["/home/user2/Desktop/TwitterFrontEnd/src/redux/slice/RegisterSlice.ts"],"sourcesContent":["import { createSlice,PayloadAction } from \"@reduxjs/toolkit\";\nimport { Dob } from \"../../utils/GlobalInterfaces\";\n\ninterface RegisterSliceState{\n    loading:boolean;\n     error:boolean;\n     firstName:string;\n     firstNameValid:boolean;\n     lastName:string;\n     lastNameValid:boolean;\n     email:string;\n     emailValid:boolean;\n     dob:Dob;\n     dobValid:boolean;\n     step:number;\n}\n\ninterface UpdatePayload{\n    name:string;\n    value:string | number | boolean;\n}\n\nconst initialState:RegisterSliceState = {\n    loading:false,\n    error:false,\n    firstName:'',\n    firstNameValid:false,\n    lastName:'',\n    lastNameValid:false,\n    email:'',\n    emailValid:false,\n    dob:{\n       month:0,\n       day:0,\n       year:0\n    },\n    dobValid:false,\n    step:1\n}\n\nexport const RegisterSlice = createSlice({\n    name:\"register\",\n    initialState,\n    reducers:{\n        updateRegister(state,action:PayloadAction<UpdatePayload>){\n             let {name,value} = action.payload;\n\n             if(name === 'month' || name === 'day' || name === 'year' ){\n                let dob = state.dob;\n\n                dob = {\n                    ...dob,\n                    [name]:value\n                }\n\n                state = {\n                    ...state,\n                    dob\n                };\n             } else {\n                 state = {\n                    ...state,\n                    [name]:value\n                 }\n             }\n\n             console.log('Updating the global register state: ',state);\n\n             return state;\n        },\n      \n        incrementStep(state){\n            state.step++;\n            return state;\n        },\n\n        decrementStep(state){\n            if(state.step === 1 || state.step === 4 || state.step >= 6){\n                 return state;\n            } else{\n                state.step--;\n                return state;\n            }\n        }\n    }\n});\n\nexport const {updateRegister,incrementStep,decrementStep} = RegisterSlice.actions;\n\nexport default RegisterSlice.reducer;\n\n"],"mappings":"AAAA,SAASA,WAAW,QAAsB,kBAAkB;AAsB5D,MAAMC,YAA+B,GAAG;EACpCC,OAAO,EAAC,KAAK;EACbC,KAAK,EAAC,KAAK;EACXC,SAAS,EAAC,EAAE;EACZC,cAAc,EAAC,KAAK;EACpBC,QAAQ,EAAC,EAAE;EACXC,aAAa,EAAC,KAAK;EACnBC,KAAK,EAAC,EAAE;EACRC,UAAU,EAAC,KAAK;EAChBC,GAAG,EAAC;IACDC,KAAK,EAAC,CAAC;IACPC,GAAG,EAAC,CAAC;IACLC,IAAI,EAAC;EACR,CAAC;EACDC,QAAQ,EAAC,KAAK;EACdC,IAAI,EAAC;AACT,CAAC;AAED,OAAO,MAAMC,aAAa,GAAGhB,WAAW,CAAC;EACrCiB,IAAI,EAAC,UAAU;EACfhB,YAAY;EACZiB,QAAQ,EAAC;IACLC,cAAcA,CAACC,KAAK,EAACC,MAAmC,EAAC;MACpD,IAAI;QAACJ,IAAI;QAACK;MAAK,CAAC,GAAGD,MAAM,CAACE,OAAO;MAEjC,IAAGN,IAAI,KAAK,OAAO,IAAIA,IAAI,KAAK,KAAK,IAAIA,IAAI,KAAK,MAAM,EAAE;QACvD,IAAIP,GAAG,GAAGU,KAAK,CAACV,GAAG;QAEnBA,GAAG,GAAG;UACF,GAAGA,GAAG;UACN,CAACO,IAAI,GAAEK;QACX,CAAC;QAEDF,KAAK,GAAG;UACJ,GAAGA,KAAK;UACRV;QACJ,CAAC;MACJ,CAAC,MAAM;QACHU,KAAK,GAAG;UACL,GAAGA,KAAK;UACR,CAACH,IAAI,GAAEK;QACV,CAAC;MACL;MAEAE,OAAO,CAACC,GAAG,CAAC,sCAAsC,EAACL,KAAK,CAAC;MAEzD,OAAOA,KAAK;IACjB,CAAC;IAEDM,aAAaA,CAACN,KAAK,EAAC;MAChBA,KAAK,CAACL,IAAI,EAAE;MACZ,OAAOK,KAAK;IAChB,CAAC;IAEDO,aAAaA,CAACP,KAAK,EAAC;MAChB,IAAGA,KAAK,CAACL,IAAI,KAAK,CAAC,IAAIK,KAAK,CAACL,IAAI,KAAK,CAAC,IAAIK,KAAK,CAACL,IAAI,IAAI,CAAC,EAAC;QACtD,OAAOK,KAAK;MACjB,CAAC,MAAK;QACFA,KAAK,CAACL,IAAI,EAAE;QACZ,OAAOK,KAAK;MAChB;IACJ;EACJ;AACJ,CAAC,CAAC;AAEF,OAAO,MAAM;EAACD,cAAc;EAACO,aAAa;EAACC;AAAa,CAAC,GAAGX,aAAa,CAACY,OAAO;AAEjF,eAAeZ,aAAa,CAACa,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}