{"ast":null,"code":"export const validateName = value => {\n  return value !== '';\n};\nexport const validateDob = dob => {\n  let {\n    month,\n    day,\n    year\n  } = dob;\n  let leapYears = [];\n  for (let i = 2023; i > 1902; i -= 4) {\n    leapYears.push(i);\n  }\n  if (!month || !day || !year) {\n    return false;\n  } else if (month === 2 && day > 29) {\n    return false;\n  } else if (month === 2 && day === 29 && !leapYears.includes(year)) {\n    return false;\n  } else if ((month === 4 || month === 6 || month === 9 || month === 11) && day > 30) {\n    return false;\n  }\n  return checkAge(dob);\n};\nconst checkAge = dob => {\n  let {\n    month,\n    day,\n    year\n  } = dob;\n  let today = new Date();\n  let todaysYear = today.getFullYear();\n  let todaysMonth = today.getMonth();\n  let todaysDay = today.getDate();\n  if (todaysYear - year > 13) {\n    return true;\n  } else if (todaysYear - year === 13) {\n    if (todaysMonth > month) {\n      return true;\n    } else if (todaysMonth === month) {\n      if (todaysDay >= day) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n  }\n  return false;\n};\nexport const validateEmail = value => {\n  if (!value.toLocaleLowerCase().match(/^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/)) {\n    return false;\n  }\n  return true;\n};\nexport const validatePhone = phone => {\n  let stripped = phone.replace(/[^0-9]/ig, \"\");\n  return stripped.length === 10;\n};","map":{"version":3,"names":["validateName","value","validateDob","dob","month","day","year","leapYears","i","push","includes","checkAge","today","Date","todaysYear","getFullYear","todaysMonth","getMonth","todaysDay","getDate","validateEmail","toLocaleLowerCase","match","validatePhone","phone","stripped","replace","length"],"sources":["/home/user2/Desktop/TwitterFrontEnd/src/services/Validators.ts"],"sourcesContent":["import { Dob } from \"../utils/GlobalInterfaces\";\n\nexport const validateName = (value:string):boolean => {\n    return value !== ''; \n}\n\nexport const validateDob = (dob:Dob):boolean => {\n\n    let {month,day,year} = dob;\n\n    let leapYears:number[] = [];\n\n    for(let i=2023;i>1902;i-=4){\n        leapYears.push(i);\n    }\n\n    if(!month || !day || !year){\n        return false;\n    } else if (month === 2 && day > 29){\n        return false;\n    } else if (month === 2 && day === 29 && !leapYears.includes(year)){\n        return false;\n    } else if ((month === 4 || month === 6 || month === 9 || month === 11) && day > 30){\n        return false;\n    }\n\n    return checkAge(dob);\n}\n\nconst checkAge = (dob:Dob):boolean => {\n\n    let {month,day,year} = dob;\n\n    let today = new Date();\n    let todaysYear = today.getFullYear();\n    let todaysMonth = today.getMonth();\n    let todaysDay = today.getDate();\n\n\n    if(todaysYear - year > 13){\n       return true;\n    } else if(todaysYear - year === 13){\n\n        if(todaysMonth > month){\n          return true;\n        }\n\n        else if (todaysMonth === month){\n\n          if(todaysDay >= day){\n             return true;\n          } else{\n             return false;\n          }\n        }\n\n    } \n\n  return false;\n\n}\n\nexport const validateEmail = (value:string):boolean => {\n    if(!value.toLocaleLowerCase().match(\n        /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n    )){\n        return false;\n    }\n\n    return true;\n}\n\nexport const validatePhone = (phone:string):boolean => {\n    let stripped = phone.replace(/[^0-9]/ig,\"\");\n    return stripped.length === 10;\n}\n\n\n"],"mappings":"AAEA,OAAO,MAAMA,YAAY,GAAIC,KAAY,IAAa;EAClD,OAAOA,KAAK,KAAK,EAAE;AACvB,CAAC;AAED,OAAO,MAAMC,WAAW,GAAIC,GAAO,IAAa;EAE5C,IAAI;IAACC,KAAK;IAACC,GAAG;IAACC;EAAI,CAAC,GAAGH,GAAG;EAE1B,IAAII,SAAkB,GAAG,EAAE;EAE3B,KAAI,IAAIC,CAAC,GAAC,IAAI,EAACA,CAAC,GAAC,IAAI,EAACA,CAAC,IAAE,CAAC,EAAC;IACvBD,SAAS,CAACE,IAAI,CAACD,CAAC,CAAC;EACrB;EAEA,IAAG,CAACJ,KAAK,IAAI,CAACC,GAAG,IAAI,CAACC,IAAI,EAAC;IACvB,OAAO,KAAK;EAChB,CAAC,MAAM,IAAIF,KAAK,KAAK,CAAC,IAAIC,GAAG,GAAG,EAAE,EAAC;IAC/B,OAAO,KAAK;EAChB,CAAC,MAAM,IAAID,KAAK,KAAK,CAAC,IAAIC,GAAG,KAAK,EAAE,IAAI,CAACE,SAAS,CAACG,QAAQ,CAACJ,IAAI,CAAC,EAAC;IAC9D,OAAO,KAAK;EAChB,CAAC,MAAM,IAAI,CAACF,KAAK,KAAK,CAAC,IAAIA,KAAK,KAAK,CAAC,IAAIA,KAAK,KAAK,CAAC,IAAIA,KAAK,KAAK,EAAE,KAAKC,GAAG,GAAG,EAAE,EAAC;IAC/E,OAAO,KAAK;EAChB;EAEA,OAAOM,QAAQ,CAACR,GAAG,CAAC;AACxB,CAAC;AAED,MAAMQ,QAAQ,GAAIR,GAAO,IAAa;EAElC,IAAI;IAACC,KAAK;IAACC,GAAG;IAACC;EAAI,CAAC,GAAGH,GAAG;EAE1B,IAAIS,KAAK,GAAG,IAAIC,IAAI,CAAC,CAAC;EACtB,IAAIC,UAAU,GAAGF,KAAK,CAACG,WAAW,CAAC,CAAC;EACpC,IAAIC,WAAW,GAAGJ,KAAK,CAACK,QAAQ,CAAC,CAAC;EAClC,IAAIC,SAAS,GAAGN,KAAK,CAACO,OAAO,CAAC,CAAC;EAG/B,IAAGL,UAAU,GAAGR,IAAI,GAAG,EAAE,EAAC;IACvB,OAAO,IAAI;EACd,CAAC,MAAM,IAAGQ,UAAU,GAAGR,IAAI,KAAK,EAAE,EAAC;IAE/B,IAAGU,WAAW,GAAGZ,KAAK,EAAC;MACrB,OAAO,IAAI;IACb,CAAC,MAEI,IAAIY,WAAW,KAAKZ,KAAK,EAAC;MAE7B,IAAGc,SAAS,IAAIb,GAAG,EAAC;QACjB,OAAO,IAAI;MACd,CAAC,MAAK;QACH,OAAO,KAAK;MACf;IACF;EAEJ;EAEF,OAAO,KAAK;AAEd,CAAC;AAED,OAAO,MAAMe,aAAa,GAAInB,KAAY,IAAa;EACnD,IAAG,CAACA,KAAK,CAACoB,iBAAiB,CAAC,CAAC,CAACC,KAAK,CAC/B,uJACJ,CAAC,EAAC;IACE,OAAO,KAAK;EAChB;EAEA,OAAO,IAAI;AACf,CAAC;AAED,OAAO,MAAMC,aAAa,GAAIC,KAAY,IAAa;EACnD,IAAIC,QAAQ,GAAGD,KAAK,CAACE,OAAO,CAAC,UAAU,EAAC,EAAE,CAAC;EAC3C,OAAOD,QAAQ,CAACE,MAAM,KAAK,EAAE;AACjC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}